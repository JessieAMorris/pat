// Code generated by go-bindata.
// sources:
// schema/pat.json
// schema/schema.json
// schema/schema.yaml
// DO NOT EDIT!

package pkg

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaPatJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x31\x6f\xf4\x20\x0c\x86\xf7\xfc\x0a\x8b\xef\x1b\x93\xa6\x43\xa7\x6c\x5d\x3a\x75\xb8\xa1\x5b\xd5\x81\x5e\x9c\xc4\x27\x02\xd4\x18\xa9\xa7\x2a\xff\xbd\x02\x2e\x27\x4e\xba\xa1\x13\xe2\xc1\x0f\x7e\xed\x9f\x06\x40\xfd\x0f\xc7\x05\x57\xad\x06\x50\x8b\x88\x1f\xfa\xfe\x14\x9c\xed\x0a\x7d\x70\x3c\xf7\x23\xeb\x49\xba\xc7\xa7\xbe\xb0\x7f\xaa\x4d\x9e\x90\x18\x4c\x96\xd7\x02\x1d\x1c\xd8\xad\x28\x0b\xc6\x00\xcf\x06\x59\xe0\x0d\x83\x90\x9d\x21\x0a\x19\x92\xf3\x45\x3a\xfb\xec\xb8\xcf\x13\x1e\xa5\x30\xcf\xce\x23\x0b\x61\x50\x03\xa4\x48\x00\xca\xea\x15\xaf\xb7\xca\xcb\x3c\xc3\xad\x2d\x95\x1c\x4d\x25\xde\x6f\x91\xf9\x9d\x36\x99\x4f\xec\xd6\x17\x32\x78\x43\xab\x7f\x82\x30\xd9\x59\x5d\x9f\xb6\xf6\xd6\x7d\x25\x41\xd6\xe6\xcf\x7a\x53\x9f\xfb\x14\x13\x7d\x4b\xe4\x12\x6d\x67\x3a\x84\x94\xd7\xd9\x42\x9b\x4b\xb5\x62\xfc\x8a\xc4\x38\xaa\x01\xde\xcb\x42\xda\x7d\x0d\x1f\xb9\x40\x8f\x23\x25\x4f\x9b\x43\x3d\xf3\xa4\x4d\xc0\x66\x6b\x7e\x03\x00\x00\xff\xff\x05\xeb\x99\xb7\xf6\x01\x00\x00")

func schemaPatJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaPatJson,
		"schema/pat.json",
	)
}

func schemaPatJson() (*asset, error) {
	bytes, err := schemaPatJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/pat.json", size: 502, mode: os.FileMode(436), modTime: time.Unix(1529439069, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x53\xb1\x4e\xc3\x30\x10\xdd\xf3\x15\xa7\x6b\xc7\x96\x30\x30\x65\x63\x61\x42\xa2\x42\x6c\xa8\x83\x69\x2e\xed\x55\x8e\x1d\xce\x17\x89\x0a\xf5\xdf\x91\x93\xb4\x38\x4d\x16\x16\xb6\xf8\xbd\xf3\xbd\x77\xe7\x97\xef\x0c\x00\x97\x61\x77\xa0\xda\x60\x01\x78\x50\x6d\x8a\x3c\x3f\x06\xef\xd6\x3d\x7a\xe7\x65\x9f\x97\x62\x2a\x5d\xdf\x3f\xe4\x3d\xb6\xc0\x55\xbc\x67\xca\x92\x95\xbd\x33\x76\x23\xbe\x21\x51\xa6\x80\x05\x54\xc6\x06\xea\x0a\x4a\xaa\xd8\x75\x25\x11\x8f\x5a\x00\xf8\xda\x5a\xfa\x3d\x02\xa0\x77\xf4\x52\x61\x01\xef\x03\x00\x57\xaa\xa3\x9b\xb4\x77\xca\x00\x60\x25\xbe\x7e\x62\x4b\x13\x06\x00\xf5\xd4\x44\x1c\x83\x0a\xbb\x3d\x8e\xe8\x73\x72\x3a\xaf\x52\x35\xa1\xcf\x96\x85\xca\x91\x9f\xb1\x56\x02\x6f\xb3\x99\x2e\x7f\x72\xff\xcc\x4a\x62\xec\x7f\x0d\x70\x91\x9b\x9f\x61\xf8\xda\x5e\x1a\x5e\x2d\xf8\x8f\x23\xed\xb4\xbf\x15\xab\x3a\xc9\xb9\xd9\xd0\x84\x10\xa1\xe1\xc5\x07\x6b\x58\xf1\x97\xb6\x42\x23\xcc\x99\x3a\x7d\xb7\xd9\x71\x2f\xb5\x72\x9b\x99\xa5\x50\x8c\x0c\x2e\xf2\x24\x63\x79\x1f\xad\x1b\x97\x93\x85\xf4\xca\xa3\xce\xab\x89\xf9\x6c\x58\x03\x2a\x6b\x97\x2f\x6c\x8c\xc2\x1a\x36\xe2\x6b\xd2\x03\xb5\x01\x1e\x2d\x89\xc2\x1b\x05\x65\xb7\x87\x56\xd9\xb2\x9e\xfa\x3f\xe3\x76\x6f\xe7\xec\x27\x00\x00\xff\xff\x80\x74\xbf\x16\x69\x03\x00\x00")

func schemaSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaSchemaJson,
		"schema/schema.json",
	)
}

func schemaSchemaJson() (*asset, error) {
	bytes, err := schemaSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/schema.json", size: 873, mode: os.FileMode(436), modTime: time.Unix(1529442034, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaSchemaYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\xb1\x4e\x33\x31\x10\x84\x7b\x3f\xc5\x28\x49\x7b\xbf\xff\x82\xca\x1d\x0d\x15\x12\x51\xc4\x0b\x98\xdc\x3a\xd9\xc8\x67\x1f\xeb\x3d\x89\x08\xf1\xee\xc8\x67\x42\x2e\xa2\x41\x62\x1b\xaf\x66\x57\xdf\xec\x78\x53\xf6\x47\x1a\xbc\xc3\x51\x75\x74\xd6\x9e\x4a\x4e\x5d\xd3\xfe\x65\x39\xd8\x5e\x7c\xd0\xee\xff\x9d\x6d\xda\xda\x28\x6b\x24\x87\xd1\x2b\x3a\x6c\x25\x0f\xa4\x47\x9a\x0a\xee\x23\x89\xe2\x99\x8a\x72\x3a\x60\x52\x8e\xac\x67\xa3\xe7\x91\x1c\xf2\xcb\x89\xf6\x6a\x46\xc9\x23\x89\x32\x15\x67\x80\xe4\x07\xaa\x2f\xd0\x96\x8a\x0a\xa7\x83\x01\x64\x8a\x6d\x03\xd8\x08\x05\x87\xd5\xda\xf6\x14\x38\xb1\x72\x4e\xc5\xee\xea\x7c\x65\x80\xc0\x6f\x3a\x09\x15\x87\xf7\x0f\x03\xf8\x52\x2a\x3d\xa7\x26\x08\xbd\x4e\x2c\xd4\x57\x52\x37\xbb\xcd\xcd\x4c\x9f\xbb\xeb\xbe\xf1\x7d\x3f\xc3\x7d\xdc\x5e\x6f\x44\xf0\xb1\x90\x59\x58\x57\xd4\xee\x7a\xdd\x4d\xb8\x2a\xe4\x44\x4f\xa1\xcd\xaa\xc1\x6d\xde\x4b\x05\xc9\xc3\x03\x47\x5a\x6a\x3f\xfe\xa0\xd5\x32\xc2\xa5\xba\x6f\xc0\x2f\x7c\x1e\x59\x49\x7c\xfc\x93\xd5\x17\xc3\x7c\x06\x00\x00\xff\xff\xec\x80\xe7\xb0\x2a\x02\x00\x00")

func schemaSchemaYamlBytes() ([]byte, error) {
	return bindataRead(
		_schemaSchemaYaml,
		"schema/schema.yaml",
	)
}

func schemaSchemaYaml() (*asset, error) {
	bytes, err := schemaSchemaYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/schema.yaml", size: 554, mode: os.FileMode(436), modTime: time.Unix(1529440889, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/pat.json": schemaPatJson,
	"schema/schema.json": schemaSchemaJson,
	"schema/schema.yaml": schemaSchemaYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schema": &bintree{nil, map[string]*bintree{
		"pat.json": &bintree{schemaPatJson, map[string]*bintree{}},
		"schema.json": &bintree{schemaSchemaJson, map[string]*bintree{}},
		"schema.yaml": &bintree{schemaSchemaYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

