// Code generated by go-bindata.
// sources:
// schema/schema.json
// schema/schema.yaml
// DO NOT EDIT!

package pkg

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x54\x4f\xef\xd3\x30\x0c\xbd\xf7\x53\x44\xfe\xed\x00\x62\xa3\x1c\x38\xf5\xc6\x65\x27\x24\x26\xc4\x8d\x0d\x29\xac\xee\x9a\xa9\x49\x8a\xe3\x4a\x4c\x74\xdf\x1d\xa5\xff\xd6\xb4\xd1\x04\x97\xdf\xf5\xe5\xd9\xcf\x7e\xb6\xf3\x27\x11\x02\x36\xee\x5c\xa2\x96\x90\x09\x28\x99\xeb\x2c\x4d\xaf\xce\x9a\x5d\x8f\xbe\xb7\x74\x49\x73\x92\x05\xef\x3e\x7c\x4c\x7b\xec\x05\xb6\x3e\x4e\xe6\xb9\x62\x65\x8d\xac\x0e\x64\x6b\x24\x56\xe8\x20\x13\x85\xac\x1c\x76\x84\x1c\x0b\x65\x3a\x8a\xc7\xbd\x96\x10\xb0\x57\xbf\xb9\x21\x9c\x00\x21\xa0\x9e\x87\x8f\xa8\x8f\x6f\x48\xfa\xe8\x00\xf5\x7c\xc9\x8c\xe4\x61\xf8\x71\x3c\xe6\xef\xde\x18\xd7\x36\xae\xd5\xae\x75\xad\x6e\xcb\xb7\x9b\xae\xbe\x89\xce\xb7\xda\xcb\x81\x63\x52\xe6\x02\xd3\xd3\xfd\xc1\x02\x8d\x4c\xea\xec\x96\x4a\x8a\x51\x2f\xc1\x27\x19\x83\x9c\x33\x9e\x24\x92\xb7\x99\x70\xb2\x20\x03\xe1\xaf\x46\x11\xe6\x90\x89\xef\x91\xfe\x23\x85\x0e\xc8\x69\x4a\x31\x6a\xd9\x9f\x57\x3c\x73\xff\x3e\x08\xc0\xd7\xa6\x0a\xbc\x05\x6b\xf0\x4b\x11\x88\x85\x06\xc7\x07\xd2\xbd\x15\x64\xf5\x5e\x55\xb8\x7a\x79\xea\xcb\xa3\xe9\xb5\x4b\xd1\xe6\x43\xad\x19\x7c\x8a\xcd\xef\xbf\xaa\xff\xac\x18\x49\x56\xaf\xd5\xc0\x28\x17\xef\xe1\xdf\xe6\x98\x0c\x92\xb1\xde\x40\x3a\xe7\xa1\xe1\xca\xc6\x99\x17\xfd\x9d\x05\x63\x5f\xaf\x33\x6c\x08\xfd\x22\xc0\x4b\x3a\xbb\xd6\x74\x3c\xd2\xd5\xa2\x46\x36\x7a\x14\x34\x52\x07\x57\x1d\xf3\x72\xe4\xd2\x72\x21\xe3\x65\xf4\x7b\xbb\xb0\x60\xe5\x76\xaf\x1c\x64\xde\xae\x9c\x49\x06\x8f\x81\x15\x77\xcb\xeb\x7f\x11\xb1\x13\x07\xb2\x1a\xb9\xc4\xc6\x89\x4f\x15\x12\x8b\x6f\xe8\x58\x99\x8b\x68\x58\x55\x8a\x6f\xfd\x57\xb7\x1c\xca\x3d\xf9\x1b\x00\x00\xff\xff\x84\x6b\x4c\x70\x3a\x05\x00\x00")

func schemaSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaSchemaJson,
		"schema/schema.json",
	)
}

func schemaSchemaJson() (*asset, error) {
	bytes, err := schemaSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/schema.json", size: 1338, mode: os.FileMode(436), modTime: time.Unix(1529442836, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaSchemaYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x92\xcb\xca\xdb\x30\x10\x85\xf7\x7a\x8a\xc1\xc9\xa2\xa5\xb8\xee\xa2\x2b\xed\x0a\x25\xab\x42\x42\xc8\x32\x14\xd4\x78\x1c\x2b\xe8\xe2\xce\x8c\xa1\xa1\xee\xbb\x17\xf9\x12\xe7\x0a\x3f\xfc\xda\x58\x1e\x8d\xbe\x73\xe6\xa0\x25\x1f\x6a\xf4\x46\x43\x2d\xd2\xe8\xa2\x38\x71\x0c\xf9\x50\xfb\x1c\xe9\x58\x94\x64\x2a\xc9\xbf\x7c\x2d\x86\xda\x42\x89\x15\x87\x1a\x1a\x23\x90\xc3\x86\xa2\x47\xa9\xb1\x65\xf8\xe6\x90\x04\x76\xc8\x62\xc3\x11\x5a\xb1\xce\xca\x59\xc9\xb9\x41\x0d\xf1\xd7\x09\x0f\xa2\x1a\x8a\x0d\x92\x58\x64\xad\x00\x82\xf1\x98\xbe\x00\x43\x13\x0b\xd9\x70\x54\x00\xd4\xba\xa1\x03\x60\x49\x58\x69\xc8\x16\x45\x89\x95\x0d\x56\x6c\x0c\x5c\x6c\xd3\x79\xa6\x00\x2a\xfb\x47\x5a\x9a\x7a\x07\x8a\x21\x32\xe7\xfe\xdf\x0a\xfa\xf1\xe8\x05\x68\x35\xdc\x4f\x28\xc3\x9c\x9c\xc5\xc0\x1a\xfe\xfe\x03\x58\xc0\x6e\xfd\x7d\xad\x08\x7f\xb7\x96\xb0\x4c\x98\xbc\x77\xdc\x6f\x7a\x87\xfd\x6e\xbe\xa7\x4c\x59\xf6\x5c\xe3\x36\xf3\x9c\x50\x19\xc7\xa8\xae\x54\x13\x6a\x3b\x4f\x78\x13\x50\x2a\xc4\x80\xeb\x6a\xb2\x9d\xc3\x6d\x66\xd3\xaa\x28\xfa\x95\x75\x78\x5d\x7b\xc8\x71\x58\xd7\x23\x4c\x2b\xbf\x00\xde\xa0\xf3\xc3\x0a\x92\x71\xef\x92\x1a\x19\x0a\x60\xcc\xfc\xc5\xf0\x8f\x2e\xca\x96\x4c\xca\x6d\x66\x3e\x95\x6e\x8c\x08\x52\xd0\x90\xfd\xdc\xef\xcb\x4f\x1f\x02\x77\x2d\x77\x9e\x3b\xee\x7c\x57\x7f\x5c\x66\x63\xa7\x47\x21\x7b\xe0\x7b\xda\xfc\x6a\x1e\x5e\xce\x53\xc9\xfb\x49\xf3\x8b\xcf\x4b\x61\x54\x52\xff\x03\x00\x00\xff\xff\x74\x4e\x70\xc5\x61\x03\x00\x00")

func schemaSchemaYamlBytes() ([]byte, error) {
	return bindataRead(
		_schemaSchemaYaml,
		"schema/schema.yaml",
	)
}

func schemaSchemaYaml() (*asset, error) {
	bytes, err := schemaSchemaYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/schema.yaml", size: 865, mode: os.FileMode(436), modTime: time.Unix(1529442832, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/schema.json": schemaSchemaJson,
	"schema/schema.yaml": schemaSchemaYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schema": &bintree{nil, map[string]*bintree{
		"schema.json": &bintree{schemaSchemaJson, map[string]*bintree{}},
		"schema.yaml": &bintree{schemaSchemaYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

